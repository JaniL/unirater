// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.petclinic.domain;

import com.springsource.petclinic.domain.Visit;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Visit_Roo_Finder {
    
    public static Long Visit.countFindVisitsByDescriptionAndVisitDate(String description, Date visitDate) {
        if (description == null || description.length() == 0) throw new IllegalArgumentException("The description argument is required");
        if (visitDate == null) throw new IllegalArgumentException("The visitDate argument is required");
        EntityManager em = Visit.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Visit AS o WHERE o.description = :description AND o.visitDate = :visitDate", Long.class);
        q.setParameter("description", description);
        q.setParameter("visitDate", visitDate);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Visit.countFindVisitsByDescriptionLike(String description) {
        if (description == null || description.length() == 0) throw new IllegalArgumentException("The description argument is required");
        description = description.replace('*', '%');
        if (description.charAt(0) != '%') {
            description = "%" + description;
        }
        if (description.charAt(description.length() - 1) != '%') {
            description = description + "%";
        }
        EntityManager em = Visit.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Visit AS o WHERE LOWER(o.description) LIKE LOWER(:description)", Long.class);
        q.setParameter("description", description);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Visit.countFindVisitsByVisitDateBetween(Date minVisitDate, Date maxVisitDate) {
        if (minVisitDate == null) throw new IllegalArgumentException("The minVisitDate argument is required");
        if (maxVisitDate == null) throw new IllegalArgumentException("The maxVisitDate argument is required");
        EntityManager em = Visit.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Visit AS o WHERE o.visitDate BETWEEN :minVisitDate AND :maxVisitDate", Long.class);
        q.setParameter("minVisitDate", minVisitDate);
        q.setParameter("maxVisitDate", maxVisitDate);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Visit> Visit.findVisitsByDescriptionAndVisitDate(String description, Date visitDate) {
        if (description == null || description.length() == 0) throw new IllegalArgumentException("The description argument is required");
        if (visitDate == null) throw new IllegalArgumentException("The visitDate argument is required");
        EntityManager em = Visit.entityManager();
        TypedQuery<Visit> q = em.createQuery("SELECT o FROM Visit AS o WHERE o.description = :description AND o.visitDate = :visitDate", Visit.class);
        q.setParameter("description", description);
        q.setParameter("visitDate", visitDate);
        return q;
    }
    
    public static TypedQuery<Visit> Visit.findVisitsByDescriptionAndVisitDate(String description, Date visitDate, String sortFieldName, String sortOrder) {
        if (description == null || description.length() == 0) throw new IllegalArgumentException("The description argument is required");
        if (visitDate == null) throw new IllegalArgumentException("The visitDate argument is required");
        EntityManager em = Visit.entityManager();
        String jpaQuery = "SELECT o FROM Visit AS o WHERE o.description = :description AND o.visitDate = :visitDate";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Visit> q = em.createQuery(jpaQuery, Visit.class);
        q.setParameter("description", description);
        q.setParameter("visitDate", visitDate);
        return q;
    }
    
    public static TypedQuery<Visit> Visit.findVisitsByDescriptionLike(String description) {
        if (description == null || description.length() == 0) throw new IllegalArgumentException("The description argument is required");
        description = description.replace('*', '%');
        if (description.charAt(0) != '%') {
            description = "%" + description;
        }
        if (description.charAt(description.length() - 1) != '%') {
            description = description + "%";
        }
        EntityManager em = Visit.entityManager();
        TypedQuery<Visit> q = em.createQuery("SELECT o FROM Visit AS o WHERE LOWER(o.description) LIKE LOWER(:description)", Visit.class);
        q.setParameter("description", description);
        return q;
    }
    
    public static TypedQuery<Visit> Visit.findVisitsByDescriptionLike(String description, String sortFieldName, String sortOrder) {
        if (description == null || description.length() == 0) throw new IllegalArgumentException("The description argument is required");
        description = description.replace('*', '%');
        if (description.charAt(0) != '%') {
            description = "%" + description;
        }
        if (description.charAt(description.length() - 1) != '%') {
            description = description + "%";
        }
        EntityManager em = Visit.entityManager();
        String jpaQuery = "SELECT o FROM Visit AS o WHERE LOWER(o.description) LIKE LOWER(:description)";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Visit> q = em.createQuery(jpaQuery, Visit.class);
        q.setParameter("description", description);
        return q;
    }
    
    public static TypedQuery<Visit> Visit.findVisitsByVisitDateBetween(Date minVisitDate, Date maxVisitDate) {
        if (minVisitDate == null) throw new IllegalArgumentException("The minVisitDate argument is required");
        if (maxVisitDate == null) throw new IllegalArgumentException("The maxVisitDate argument is required");
        EntityManager em = Visit.entityManager();
        TypedQuery<Visit> q = em.createQuery("SELECT o FROM Visit AS o WHERE o.visitDate BETWEEN :minVisitDate AND :maxVisitDate", Visit.class);
        q.setParameter("minVisitDate", minVisitDate);
        q.setParameter("maxVisitDate", maxVisitDate);
        return q;
    }
    
    public static TypedQuery<Visit> Visit.findVisitsByVisitDateBetween(Date minVisitDate, Date maxVisitDate, String sortFieldName, String sortOrder) {
        if (minVisitDate == null) throw new IllegalArgumentException("The minVisitDate argument is required");
        if (maxVisitDate == null) throw new IllegalArgumentException("The maxVisitDate argument is required");
        EntityManager em = Visit.entityManager();
        String jpaQuery = "SELECT o FROM Visit AS o WHERE o.visitDate BETWEEN :minVisitDate AND :maxVisitDate";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Visit> q = em.createQuery(jpaQuery, Visit.class);
        q.setParameter("minVisitDate", minVisitDate);
        q.setParameter("maxVisitDate", maxVisitDate);
        return q;
    }
    
}
