// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.petclinic.web;

import com.springsource.petclinic.domain.Owner;
import com.springsource.petclinic.domain.Pet;
import com.springsource.petclinic.reference.PetType;
import com.springsource.petclinic.web.PetController;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect PetController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByNameAndWeight", "form" }, method = RequestMethod.GET)
    public String PetController.findPetsByNameAndWeightForm(Model uiModel) {
        return "pets/findPetsByNameAndWeight";
    }
    
    @RequestMapping(params = "find=ByNameAndWeight", method = RequestMethod.GET)
    public String PetController.findPetsByNameAndWeight(@RequestParam("name") String name, @RequestParam("weight") Float weight, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("pets", Pet.findPetsByNameAndWeight(name, weight, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Pet.countFindPetsByNameAndWeight(name, weight) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("pets", Pet.findPetsByNameAndWeight(name, weight, sortFieldName, sortOrder).getResultList());
        }
        return "pets/list";
    }
    
    @RequestMapping(params = { "find=ByOwner", "form" }, method = RequestMethod.GET)
    public String PetController.findPetsByOwnerForm(Model uiModel) {
        uiModel.addAttribute("owners", Owner.findAllOwners());
        return "pets/findPetsByOwner";
    }
    
    @RequestMapping(params = "find=ByOwner", method = RequestMethod.GET)
    public String PetController.findPetsByOwner(@RequestParam("owner") Owner owner, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("pets", Pet.findPetsByOwner(owner, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Pet.countFindPetsByOwner(owner) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("pets", Pet.findPetsByOwner(owner, sortFieldName, sortOrder).getResultList());
        }
        return "pets/list";
    }
    
    @RequestMapping(params = { "find=BySendRemindersAndWeightLessThan", "form" }, method = RequestMethod.GET)
    public String PetController.findPetsBySendRemindersAndWeightLessThanForm(Model uiModel) {
        return "pets/findPetsBySendRemindersAndWeightLessThan";
    }
    
    @RequestMapping(params = "find=BySendRemindersAndWeightLessThan", method = RequestMethod.GET)
    public String PetController.findPetsBySendRemindersAndWeightLessThan(@RequestParam(value = "sendReminders", required = false) boolean sendReminders, @RequestParam("weight") Float weight, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("pets", Pet.findPetsBySendRemindersAndWeightLessThan(sendReminders, weight, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Pet.countFindPetsBySendRemindersAndWeightLessThan(sendReminders, weight) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("pets", Pet.findPetsBySendRemindersAndWeightLessThan(sendReminders, weight, sortFieldName, sortOrder).getResultList());
        }
        return "pets/list";
    }
    
    @RequestMapping(params = { "find=ByTypeAndNameLike", "form" }, method = RequestMethod.GET)
    public String PetController.findPetsByTypeAndNameLikeForm(Model uiModel) {
        uiModel.addAttribute("pettypes", java.util.Arrays.asList(PetType.class.getEnumConstants()));
        return "pets/findPetsByTypeAndNameLike";
    }
    
    @RequestMapping(params = "find=ByTypeAndNameLike", method = RequestMethod.GET)
    public String PetController.findPetsByTypeAndNameLike(@RequestParam("type") PetType type, @RequestParam("name") String name, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("pets", Pet.findPetsByTypeAndNameLike(type, name, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Pet.countFindPetsByTypeAndNameLike(type, name) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("pets", Pet.findPetsByTypeAndNameLike(type, name, sortFieldName, sortOrder).getResultList());
        }
        return "pets/list";
    }
    
}
